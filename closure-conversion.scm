(define global-env '())

(define functions '())
(define (add-function x)
  (set! functions (cons x functions)))

(define lambda-name-counter 0)
(define (unique-lambda-name)
  (set! lambda-name-counter (add1 lambda-name-counter))
  (format "lambda~A" lambda-name-counter))

(define (lambdas->closures x)
  (cond ((lambda? x)
	 (let ((arity (length (lambda-args x)))
	       (name (unique-lambda-name))
	       (free (free-vars x)))
	   (let* ((function-args (cons 'c_env (lambda-args x)))
		  (converted-body (lambdas->closures (lambda-body x)))
		  (substituted-body (free-vars->env-refs converted-body free)))
             (add-function (make-function name function-args (make-begin substituted-body))))
	   (make-closure name arity free)))
	((list? x) (map lambdas->closures x))
	((immediate? x) x)
	((var? x) x)
	((string? x) x)
	(else (error "not implemented" (car x)))))

(define (free-vars x)
  (cond
    ((lambda? x)
     (set-substract (free-vars (lambda-body x))
		    (lambda-args x)))
    ((closure? x) (closure-free-vars x))
    ((let? x)
     (set-union (set-union-many (map free-vars (let-bindings-vals x)))
		(set-substract (free-vars (let-body x))
                               (let-bindings-vars x))))
    ((immediate? x) '())
    ((quote? x) '())
    ((null? x) '())
    ((primcall? x) (set-union-many (map free-vars (cdr x))))
    ((list? x) (set-union-many (map free-vars x)))
    ((and (var? x) (not (assoc x global-env)))
     (list x))))

(define (free-vars->env-refs_ x reps)
  (cond
    ((var? x)
     (let ((var-rep (assoc x reps)))
       (if (eq? var-rep #f)
         x
         (cdr var-rep))))
    ; TODO: let
    ((immediate? x) x)
    ((quote? x) x)
    ((null? x) x)
    ((closure? x)
     (make-closure (closure-function x)
	           (closure-arity x)
	           (free-vars->env-refs_ (closure-free-vars x) reps)))
    ((list? x) (map (lambda (y) (free-vars->env-refs_ y reps)) x))
    (else (error "not implemented" (car x)))))
(define (free-vars->env-refs x free)
  (let ((reps (indexed-map (lambda (i e) `(,e list-ref c_env ,i))
	                    free)))
    (free-vars->env-refs_ x reps)))

